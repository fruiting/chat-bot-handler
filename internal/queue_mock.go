// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockQueueProducer is a mock of QueueProducer interface.
type MockQueueProducer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueProducerMockRecorder
}

// MockQueueProducerMockRecorder is the mock recorder for MockQueueProducer.
type MockQueueProducerMockRecorder struct {
	mock *MockQueueProducer
}

// NewMockQueueProducer creates a new mock instance.
func NewMockQueueProducer(ctrl *gomock.Controller) *MockQueueProducer {
	mock := &MockQueueProducer{ctrl: ctrl}
	mock.recorder = &MockQueueProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueProducer) EXPECT() *MockQueueProducerMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockQueueProducer) Push(message *sarama.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockQueueProducerMockRecorder) Push(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockQueueProducer)(nil).Push), message)
}
