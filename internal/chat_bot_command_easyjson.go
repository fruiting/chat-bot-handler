// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package internal

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson178917eDecodeFruitingChatBotHandlerInternal(in *jlexer.Lexer, out *ChatBotCommandInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChatId":
			out.ChatId = ChatId(in.Int64())
		case "Command":
			out.Command = ChatBotCommand(in.String())
		case "Parser":
			out.Parser = string(in.String())
		case "Positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]string, 0, 4)
					} else {
						out.Positions = []string{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Positions = append(out.Positions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Keywords":
			if in.IsNull() {
				in.Skip()
				out.Keywords = nil
			} else {
				in.Delim('[')
				if out.Keywords == nil {
					if !in.IsDelim(']') {
						out.Keywords = make([]string, 0, 4)
					} else {
						out.Keywords = []string{}
					}
				} else {
					out.Keywords = (out.Keywords)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Keywords = append(out.Keywords, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IsReady":
			out.IsReady = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson178917eEncodeFruitingChatBotHandlerInternal(out *jwriter.Writer, in ChatBotCommandInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChatId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ChatId))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.String(string(in.Command))
	}
	{
		const prefix string = ",\"Parser\":"
		out.RawString(prefix)
		out.String(string(in.Parser))
	}
	{
		const prefix string = ",\"Positions\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Positions {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Keywords\":"
		out.RawString(prefix)
		if in.Keywords == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Keywords {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IsReady\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReady))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatBotCommandInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson178917eEncodeFruitingChatBotHandlerInternal(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatBotCommandInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson178917eEncodeFruitingChatBotHandlerInternal(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatBotCommandInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson178917eDecodeFruitingChatBotHandlerInternal(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatBotCommandInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson178917eDecodeFruitingChatBotHandlerInternal(l, v)
}
